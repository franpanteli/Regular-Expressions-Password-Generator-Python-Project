About list comprehension:
	- List comprehension <- to construct a Python list from an iterable type 
		-> Lists, tuples, strings 
	- We are making a Python list, without a for loop
	- We are writing a function which takes a string in Camel Case or Pascal Case, and then converting it into Snake Case 
	- We use a for loop to get the results, and then we use a list comprehension instead of the loop 
		-> These two methods can be used to get the same results 
		-> The aim of the project is to do the list comprehension 
	- We are building a function which can take a camelCase or PascalCase string and can convert it to a snake_case formatted string 
	- List comprehensions are how we construct lists without using loops or the .append() method 
		-> These are faster and more concise 

The convert_to_snake_case() function:
	-> We are defining a function which accepts a string 
	-> The first stage is initialising arrays which we want to populate 
	-> We first populate this list with a for loop: 
		-> We are converting each of the characters to snake case
		-> Using a for loop to iterate through the pascal_or_camel_cased_string string 
		-> for char in pascal_or_camel_cased_string:
		-> When we are writing the function, we use the `pass` parameter, which tells the computer to void the region under it when it's executing the code 
		-> .lower() <- To make a string lowercase
			-> converted_character = '_' + char.lower() 
			-> (above) this is an example of this string manipulation 
			-> We are taking the lowercase version of char during an iteration, appending an underscore to it and storing its value in a variable called `converted_character`
			-> We are then adding this to the list called `snake_cased_char_list`
			-> Arrays only use a single datatype, lists don't <- so arrays are more efficient, but can be used in a more limited number of contexts 
		-> snake_cased_char_list.append(char) <- Add (append) `char` to the list called `snake_cased_char_list`
		-> snake_cased_string = ''.join(snake_cased_char_list) 
			-> Convert the list of string characters into a string 
			-> Join the characters from the list to the empty string which the .join method is called on 
			-> Save this in the `snake_cased_string` variable 

	-> The .strip() method:  
		-> clean_snake_cased_string = snake_cased_string.strip('_') <- In our code 
		-> We are telling it to remove (strip) certain characters from the `nake_cased_string` string 
		-> And then store them in the `clean_snake_cased_string` variable 
		-> We then return the value of this 

	-> def main():
		-> We define the functions in the Python script 
		-> And then we apply / test them in the main() function 
		-> We can call the functions in here 
		-> We can use this to print the output of the functions called here 
		-> Executing this main() under an if condition
			-> The if condition being, if the current .py file is the main .py file, not if the current .py file is for defining modules 
			-> Only execute the main() function if we are currently in the main Python file for the project
			-> We have the main Python file for the project, and then we have the ones which define its modules 

	-> Moving to list comprehensions from loops:
		-> These are a more concise way of constructing lists in Python 
		-> We are converting input strings into snake case
		-> We currently have the function written, but with loops
		-> We are converting this function into one which works with list comprehensions 
		-> [] <- These are 'square braces' 
		-> () <- These are 'parenthesis'
		-> {} <- These are 'curly braces'

snake_cased_char_list = [
    '_' + char.lower() if char.isupper()
]

		-> This contains the value we would like to include in the variable storing the list 
		-> We are adding a space to the lowercase version of char, if it's uppercase 
		-> This builds out the list and stores it in the `snake_cased_char_list` variable 
		-> List comprehension looks like having an if statement inside the list itself, which is building out that list 
			-> We can also add an `else char` statement into the definition of the list, for the list comprehension 
			-> If what we are processing doesn't match this description, else - do this 

	-> Input strings for list comprehensions:

snake_cased_char_list = [
    '_' + char.lower() if char.isupper()
    else char
    for char in pascal_or_camel_cased_string
]
		-> The code we now have matches the previous for loop 
		-> List comprehensions can be used to do the same tasks as for loops, to build out the values of these lists 
		-> for char in pascal_or_camel_cased_string <- To iterate over the characters of the string in the list comprehension 

	-> Then return ''.join(snake_cased_char_list).strip('_') 
		-> This returns the list stripped from _ characters, added to a space 